<%@ jet package="org.eclipse.payara.tools.v3.wizards" 
	imports="java.util.* org.eclipse.jst.j2ee.internal.common.operations.*" 
	class="ContainerResourceTemplate" 
	skeleton="generator.skeleton"
%>
<%
	AddGenericResourceTemplateModel model = (AddGenericResourceTemplateModel) argument;
	String containerRepresentationClass = model.getUnqualifiedContainerRepresentationClass();
	String mimeType = model.getProperty(AddGenericResourceDataModelProvider.MIME_TYPE).trim();
	String path = model.getProperty(AddGenericResourceDataModelProvider.PATH).trim();
	String containerPath = model.getProperty(AddGenericResourceDataModelProvider.CONTAINER_PATH).trim();
	String methodNameFromMimeType = model.getMethodNameSuffixFromMimeType();
	String originalClassName = model.getProperty(AddGenericResourceDataModelProvider.ORIGINAL_CLASS_NAME).trim();
	String[] paramListStrings = model.getParamList();
	String paramList = model.getCommaSeparatedParamList();
	boolean hasParam = (paramListStrings != null);
	String paramListNoTypes = (hasParam ? paramList : "");
	String pathParams = "";
	boolean isClientPattern = model.isClientControlledPattern();
	
	if (hasParam) { 
		for (int i=0;i<paramListStrings.length;i++) { 
			pathParams+="@PathParam(\"" + paramListStrings[i] + "\") String " + paramListStrings[i];
			if (i < paramListStrings.length - 1) {
				pathParams+=", ";
			}
		}
	}
%>
<%@ include file="_flags.template" %>
<%@ include file="_package.template" %>
<%@ include file="_imports.template" %>
@Path("<%= containerPath %>")
<%@ include file="_class.template" %>
<% if (isClientPattern) { %>
    @SuppressWarnings("unused")
<% } %>
    @Context
    private UriInfo context;
<%@ include file="_constructors.template" %>
<%@ include file="_methods.template" %>

    /**
     * Retrieves representation of an instance of <%= model.getClassName() %>
     * @return an instance of <%= containerRepresentationClass %>
     */
    @GET
    @Produces("<%= mimeType %>")
    public <%= containerRepresentationClass %> get<%= methodNameFromMimeType %>() {
        // TODO return proper representation object
        throw new UnsupportedOperationException();
    }

<% if (!isClientPattern) { %>
    /**
     * POST method for creating an instance of <%= originalClassName %>
     * @param content representation for the new resource
     * @return an HTTP response with content of the created resource
     */
    @POST
    @Consumes("<%= mimeType %>")
    @Produces("<%= mimeType %>")
    public Response post<%= methodNameFromMimeType %>(<%= model.getUnqualifiedRepresentationClass() %> content) {
        // TODO
        return Response.created(context.getAbsolutePath()).build();
    }

<% } %>
	/**
     * Sub-resource locator method for <%= path %>
     */
    @Path("<%= path %>")
    public <%= originalClassName %> get<%= originalClassName %>(<%= pathParams %>) {
        return <%= originalClassName %>.getInstance(<%= paramListNoTypes %>);
    }
}